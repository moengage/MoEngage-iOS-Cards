#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef MOENGAGECARDS_SWIFT_H
#define MOENGAGECARDS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoEngageCards",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSCoder;

SWIFT_CLASS("_TtC13MoEngageCards12MOCardAction")
@interface MOCardAction : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull typeString;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull kvPairs;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSDate;
@class MOCardTemplateData;
@class MOCardDisplayControl;

SWIFT_CLASS("_TtC13MoEngageCards14MOCardCampaign")
@interface MOCardCampaign : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull cardID;
@property (nonatomic, readonly) BOOL shouldShow;
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
@property (nonatomic, readonly, copy) NSDate * _Nonnull createdDate;
@property (nonatomic, readonly, copy) NSDate * _Nonnull updatedDate;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull metaData;
@property (nonatomic, readonly, strong) MOCardTemplateData * _Nonnull templateData;
@property (nonatomic, readonly, strong) MOCardDisplayControl * _Nonnull displayControl;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cardPayload;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MOCardStyle;
@class MOCardWidget;

SWIFT_CLASS("_TtC13MoEngageCards15MOCardContainer")
@interface MOCardContainer : NSObject <NSCoding>
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nonnull typeString;
@property (nonatomic, readonly, strong) MOCardStyle * _Nullable style;
@property (nonatomic, readonly, copy) NSArray<MOCardWidget *> * _Nonnull widgets;
@property (nonatomic, readonly, copy) NSArray<MOCardAction *> * _Nonnull actions;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MOCardShowTime;

SWIFT_CLASS("_TtC13MoEngageCards20MOCardDisplayControl")
@interface MOCardDisplayControl : NSObject <NSCoding>
@property (nonatomic, readonly) BOOL isPinned;
@property (nonatomic, readonly) int64_t maxTimesToShow;
@property (nonatomic, readonly, copy) NSDate * _Nullable expiryDate;
@property (nonatomic, readonly, strong) MOCardShowTime * _Nullable showTime;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MoEngageCards14MOCardShowTime")
@interface MOCardShowTime : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull startTime;
@property (nonatomic, readonly, copy) NSString * _Nonnull endTime;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;

SWIFT_CLASS("_TtC13MoEngageCards11MOCardStyle")
@interface MOCardStyle : NSObject <NSCoding>
@property (nonatomic, readonly, strong) UIColor * _Nullable bgColor;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MoEngageCards18MOCardTemplateData")
@interface MOCardTemplateData : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull typeString;
@property (nonatomic, readonly, copy) NSArray<MOCardContainer *> * _Nonnull containers;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MoEngageCards12MOCardWidget")
@interface MOCardWidget : NSObject <NSCoding>
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nonnull typeString;
@property (nonatomic, readonly, strong) MOCardStyle * _Nullable style;
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
@property (nonatomic, readonly, copy) NSArray<MOCardAction *> * _Nonnull actions;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol MOCardsDelegate;
@class MOCardsData;
@class MOAccountMeta;
@class MOCardsUIConfiguration;
@protocol MOCardsViewControllerDelegate;
@class UINavigationController;
@class MOCardsListViewController;

SWIFT_CLASS("_TtC13MoEngageCards7MOCards")
@interface MOCards : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MOCards * _Nonnull sharedInstance;)
+ (MOCards * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Method to set the cards delegate
/// \param delegate delegate object
///
/// \param appID optional account identifier
///
- (void)setCardsDelegateWithDelegate:(id <MOCardsDelegate> _Nonnull)delegate forAppID:(NSString * _Nullable)appID;
/// Method to sync the cards
/// \param appID account identifier
///
/// \param completionBlock completion block to be called after sync is performed
///
- (void)syncCardsForAppID:(NSString * _Nullable)appID withCompletion:(void (^ _Nullable)(BOOL))completionBlock;
/// Method to fetch Cards data
/// \param appID account identifier
///
/// \param completionBlock completion block with cards data and account info.
///
- (void)getCardsDataForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(MOCardsData * _Nullable, MOAccountMeta * _Nullable))completionBlock;
/// Method to fetch Cards categories
/// \param appID account identifier
///
/// \param completionBlock completion block with cards categories and account info.
///
- (void)getCardsCategoriesForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(NSArray<NSString *> * _Nonnull, MOAccountMeta * _Nullable))completionBlock;
/// Method to fetch Cards campaign
/// \param appID account identifier
///
/// \param completionBlock completion block with cards campaign info and account info.
///
- (void)getCardsForCategory:(NSString * _Nonnull)category forAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(NSArray<MOCardCampaign *> * _Nonnull, MOAccountMeta * _Nullable))completionBlock;
/// Method to fetch ShowAllTab status.
/// \param appID account identifier
///
///
/// returns:
/// Bool indicating if showAllTab is set to true/false.
- (void)isAllCategoryEnabledForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(BOOL))completionBlock;
/// Method to track cards shown and update delivery counters accordingly.
/// \param card instance of MOCardCampaign
///
/// \param appID account identifier.
///
- (void)cardShown:(MOCardCampaign * _Nonnull)card forAppID:(NSString * _Nullable)appID;
/// Method to mark a card as clicked and tracks an event for statistical purpose.
/// \param card instance of MOCardCampaign
///
/// \param appID account identifier.
///
- (void)cardClicked:(MOCardCampaign * _Nonnull)card forAppID:(NSString * _Nullable)appID;
/// Method to mark a card as clicked and tracks an event for statistical purpose.
/// \param card instance of MOCardCampaign
///
/// \param widgetID unique identifier for the widget that was clicked
///
/// \param appID account identifier.
///
- (void)cardClicked:(MOCardCampaign * _Nonnull)card withWidgetID:(NSInteger)widgetID forAppID:(NSString * _Nullable)appID;
/// Method to mark tracking delivery of cards to inbox.
/// \param card instance of MOCardCampaign
///
/// \param appID account identifier.
///
- (void)cardDelivered:(MOCardCampaign * _Nonnull)card forAppID:(NSString * _Nullable)appID;
/// Method to delete the cards
/// \param cardsArr array of MOCardCampaign
///
/// \param appID account identifier.
///
/// \param completionBlock completion block called once card is deleted.
///
- (void)deleteCards:(NSArray<MOCardCampaign *> * _Nonnull)cardsArr forAppID:(NSString * _Nullable)appID andCompletionBlock:(void (^ _Nonnull)(BOOL, MOAccountMeta * _Nullable))completionBlock;
- (void)cardsViewControllerLoadedForAppID:(NSString * _Nullable)appID;
- (void)cardsViewControllerDismissedForAppID:(NSString * _Nullable)appID;
/// Method to fetch new cards count
/// \param appID account identifier.
///
/// \param completionBlock completion block with new cards count and account info.
///
- (void)getNewCardsCountForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(NSInteger, MOAccountMeta * _Nullable))completionBlock;
/// Method to fetch unclicked cards count
/// \param appID account identifier.
///
/// \param completionBlock completion block with unclicked cards count and account info.
///
- (void)getUnclickedCardsCountForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(NSInteger, MOAccountMeta * _Nullable))completionBlock;
/// Method to fetch clicked cards count
/// \param appID account identifier.
///
/// \param completionBlock completion block with clicked cards count and account info.
///
- (void)getClickedCardsCountForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(NSInteger, MOAccountMeta * _Nullable))completionBlock;
/// Method to present the CardsController
/// \param config Cards config instance
///
/// \param delegate optional cards delegate
///
/// \param appID account identifier.
///
- (void)presentCardsViewControllerWithUIConfiguration:(MOCardsUIConfiguration * _Nullable)config withCardsViewControllerDelegate:(id <MOCardsViewControllerDelegate> _Nullable)delegate forAppID:(NSString * _Nullable)appID;
/// Method to push the CardsController
/// \param config Cards config instance
///
/// \param delegate optional cards delegate
///
/// \param appID account identifier.
///
- (void)pushCardsViewControllerToNavigationController:(UINavigationController * _Nonnull)navController withUIConfiguration:(MOCardsUIConfiguration * _Nullable)config withCardsViewControllerDelegate:(id <MOCardsViewControllerDelegate> _Nullable)delegate forAppID:(NSString * _Nullable)appID;
/// Method to return the CardsController
/// \param config Cards config instance
///
/// \param delegate optional cards delegate
///
/// \param appID account identifier.
///
///
/// returns:
/// returns the CardsController
- (void)getCardsViewControllerWithUIConfiguration:(MOCardsUIConfiguration * _Nullable)config withCardsViewControllerDelegate:(id <MOCardsViewControllerDelegate> _Nullable)delegate forAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(MOCardsListViewController * _Nullable))completionBlock;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13MoEngageCards11MOCardsData")
@interface MOCardsData : NSObject <NSCoding>
@property (nonatomic, readonly) BOOL showAllTab;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull cardCategories;
@property (nonatomic, readonly, copy) NSArray<MOCardCampaign *> * _Nonnull cards;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP13MoEngageCards15MOCardsDelegate_")
@protocol MOCardsDelegate
@optional
- (void)cardsSyncedSuccessfullyForAccountMeta:(MOAccountMeta * _Nonnull)accountMeta;
@end

@class UITraitCollection;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

SWIFT_CLASS("_TtC13MoEngageCards25MOCardsListViewController")
@interface MOCardsListViewController : UIViewController <UIGestureRecognizerDelegate>
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface MOCardsListViewController (SWIFT_EXTENSION(MoEngageCards)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didHighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didUnhighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_CLASS("_TtC13MoEngageCards25MOCardsNavigationBarStyle")
@interface MOCardsNavigationBarStyle : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13MoEngageCards22MOCardsUIConfiguration")
@interface MOCardsUIConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP13MoEngageCards29MOCardsViewControllerDelegate_")
@protocol MOCardsViewControllerDelegate
@optional
- (void)cardsViewControllerDismissedForAccountMeta:(MOAccountMeta * _Nonnull)accountMeta;
- (void)cardDeletedWithCardInfo:(MOCardCampaign * _Nonnull)card forAccountMeta:(MOAccountMeta * _Nonnull)accountMeta;
- (BOOL)cardClickedWithCardInfo:(MOCardCampaign * _Nonnull)card andAction:(MOCardAction * _Nonnull)action forAccountMeta:(MOAccountMeta * _Nonnull)accountMeta SWIFT_WARN_UNUSED_RESULT;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef MOENGAGECARDS_SWIFT_H
#define MOENGAGECARDS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoEngageCards",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSCoder;

SWIFT_CLASS("_TtC13MoEngageCards12MOCardAction")
@interface MOCardAction : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull typeString;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull kvPairs;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSDate;
@class MOCardTemplateData;
@class MOCardDisplayControl;

SWIFT_CLASS("_TtC13MoEngageCards14MOCardCampaign")
@interface MOCardCampaign : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull cardID;
@property (nonatomic, readonly) BOOL shouldShow;
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
@property (nonatomic, readonly, copy) NSDate * _Nonnull createdDate;
@property (nonatomic, readonly, copy) NSDate * _Nonnull updatedDate;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull metaData;
@property (nonatomic, readonly, strong) MOCardTemplateData * _Nonnull templateData;
@property (nonatomic, readonly, strong) MOCardDisplayControl * _Nonnull displayControl;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cardPayload;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MOCardStyle;
@class MOCardWidget;

SWIFT_CLASS("_TtC13MoEngageCards15MOCardContainer")
@interface MOCardContainer : NSObject <NSCoding>
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nonnull typeString;
@property (nonatomic, readonly, strong) MOCardStyle * _Nullable style;
@property (nonatomic, readonly, copy) NSArray<MOCardWidget *> * _Nonnull widgets;
@property (nonatomic, readonly, copy) NSArray<MOCardAction *> * _Nonnull actions;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MOCardShowTime;

SWIFT_CLASS("_TtC13MoEngageCards20MOCardDisplayControl")
@interface MOCardDisplayControl : NSObject <NSCoding>
@property (nonatomic, readonly) BOOL isPinned;
@property (nonatomic, readonly) int64_t maxTimesToShow;
@property (nonatomic, readonly, copy) NSDate * _Nullable expiryDate;
@property (nonatomic, readonly, strong) MOCardShowTime * _Nullable showTime;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MoEngageCards14MOCardShowTime")
@interface MOCardShowTime : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull startTime;
@property (nonatomic, readonly, copy) NSString * _Nonnull endTime;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;

SWIFT_CLASS("_TtC13MoEngageCards11MOCardStyle")
@interface MOCardStyle : NSObject <NSCoding>
@property (nonatomic, readonly, strong) UIColor * _Nullable bgColor;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MoEngageCards18MOCardTemplateData")
@interface MOCardTemplateData : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull typeString;
@property (nonatomic, readonly, copy) NSArray<MOCardContainer *> * _Nonnull containers;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13MoEngageCards12MOCardWidget")
@interface MOCardWidget : NSObject <NSCoding>
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nonnull typeString;
@property (nonatomic, readonly, strong) MOCardStyle * _Nullable style;
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
@property (nonatomic, readonly, copy) NSArray<MOCardAction *> * _Nonnull actions;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol MOCardsDelegate;
@class MOCardsData;
@class MOAccountMeta;
@class MOCardsUIConfiguration;
@protocol MOCardsViewControllerDelegate;
@class UINavigationController;
@class MOCardsListViewController;

SWIFT_CLASS("_TtC13MoEngageCards7MOCards")
@interface MOCards : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MOCards * _Nonnull sharedInstance;)
+ (MOCards * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Method to set the cards delegate
/// \param delegate delegate object
///
/// \param appID optional account identifier
///
- (void)setCardsDelegateWithDelegate:(id <MOCardsDelegate> _Nonnull)delegate forAppID:(NSString * _Nullable)appID;
/// Method to sync the cards
/// \param appID account identifier
///
/// \param completionBlock completion block to be called after sync is performed
///
- (void)syncCardsForAppID:(NSString * _Nullable)appID withCompletion:(void (^ _Nullable)(BOOL))completionBlock;
/// Method to fetch Cards data
/// \param appID account identifier
///
/// \param completionBlock completion block with cards data and account info.
///
- (void)getCardsDataForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(MOCardsData * _Nullable, MOAccountMeta * _Nullable))completionBlock;
/// Method to fetch Cards categories
/// \param appID account identifier
///
/// \param completionBlock completion block with cards categories and account info.
///
- (void)getCardsCategoriesForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(NSArray<NSString *> * _Nonnull, MOAccountMeta * _Nullable))completionBlock;
/// Method to fetch Cards campaign
/// \param appID account identifier
///
/// \param completionBlock completion block with cards campaign info and account info.
///
- (void)getCardsForCategory:(NSString * _Nonnull)category forAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(NSArray<MOCardCampaign *> * _Nonnull, MOAccountMeta * _Nullable))completionBlock;
/// Method to fetch ShowAllTab status.
/// \param appID account identifier
///
///
/// returns:
/// Bool indicating if showAllTab is set to true/false.
- (void)isAllCategoryEnabledForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(BOOL))completionBlock;
/// Method to track cards shown and update delivery counters accordingly.
/// \param card instance of MOCardCampaign
///
/// \param appID account identifier.
///
- (void)cardShown:(MOCardCampaign * _Nonnull)card forAppID:(NSString * _Nullable)appID;
/// Method to mark a card as clicked and tracks an event for statistical purpose.
/// \param card instance of MOCardCampaign
///
/// \param appID account identifier.
///
- (void)cardClicked:(MOCardCampaign * _Nonnull)card forAppID:(NSString * _Nullable)appID;
/// Method to mark a card as clicked and tracks an event for statistical purpose.
/// \param card instance of MOCardCampaign
///
/// \param widgetID unique identifier for the widget that was clicked
///
/// \param appID account identifier.
///
- (void)cardClicked:(MOCardCampaign * _Nonnull)card withWidgetID:(NSInteger)widgetID forAppID:(NSString * _Nullable)appID;
/// Method to mark tracking delivery of cards to inbox.
/// \param card instance of MOCardCampaign
///
/// \param appID account identifier.
///
- (void)cardDelivered:(MOCardCampaign * _Nonnull)card forAppID:(NSString * _Nullable)appID;
/// Method to delete the cards
/// \param cardsArr array of MOCardCampaign
///
/// \param appID account identifier.
///
/// \param completionBlock completion block called once card is deleted.
///
- (void)deleteCards:(NSArray<MOCardCampaign *> * _Nonnull)cardsArr forAppID:(NSString * _Nullable)appID andCompletionBlock:(void (^ _Nonnull)(BOOL, MOAccountMeta * _Nullable))completionBlock;
- (void)cardsViewControllerLoadedForAppID:(NSString * _Nullable)appID;
- (void)cardsViewControllerDismissedForAppID:(NSString * _Nullable)appID;
/// Method to fetch new cards count
/// \param appID account identifier.
///
/// \param completionBlock completion block with new cards count and account info.
///
- (void)getNewCardsCountForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(NSInteger, MOAccountMeta * _Nullable))completionBlock;
/// Method to fetch unclicked cards count
/// \param appID account identifier.
///
/// \param completionBlock completion block with unclicked cards count and account info.
///
- (void)getUnclickedCardsCountForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(NSInteger, MOAccountMeta * _Nullable))completionBlock;
/// Method to fetch clicked cards count
/// \param appID account identifier.
///
/// \param completionBlock completion block with clicked cards count and account info.
///
- (void)getClickedCardsCountForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(NSInteger, MOAccountMeta * _Nullable))completionBlock;
/// Method to present the CardsController
/// \param config Cards config instance
///
/// \param delegate optional cards delegate
///
/// \param appID account identifier.
///
- (void)presentCardsViewControllerWithUIConfiguration:(MOCardsUIConfiguration * _Nullable)config withCardsViewControllerDelegate:(id <MOCardsViewControllerDelegate> _Nullable)delegate forAppID:(NSString * _Nullable)appID;
/// Method to push the CardsController
/// \param config Cards config instance
///
/// \param delegate optional cards delegate
///
/// \param appID account identifier.
///
- (void)pushCardsViewControllerToNavigationController:(UINavigationController * _Nonnull)navController withUIConfiguration:(MOCardsUIConfiguration * _Nullable)config withCardsViewControllerDelegate:(id <MOCardsViewControllerDelegate> _Nullable)delegate forAppID:(NSString * _Nullable)appID;
/// Method to return the CardsController
/// \param config Cards config instance
///
/// \param delegate optional cards delegate
///
/// \param appID account identifier.
///
///
/// returns:
/// returns the CardsController
- (void)getCardsViewControllerWithUIConfiguration:(MOCardsUIConfiguration * _Nullable)config withCardsViewControllerDelegate:(id <MOCardsViewControllerDelegate> _Nullable)delegate forAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nonnull)(MOCardsListViewController * _Nullable))completionBlock;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13MoEngageCards11MOCardsData")
@interface MOCardsData : NSObject <NSCoding>
@property (nonatomic, readonly) BOOL showAllTab;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull cardCategories;
@property (nonatomic, readonly, copy) NSArray<MOCardCampaign *> * _Nonnull cards;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP13MoEngageCards15MOCardsDelegate_")
@protocol MOCardsDelegate
@optional
- (void)cardsSyncedSuccessfullyForAccountMeta:(MOAccountMeta * _Nonnull)accountMeta;
@end

@class UITraitCollection;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

SWIFT_CLASS("_TtC13MoEngageCards25MOCardsListViewController")
@interface MOCardsListViewController : UIViewController <UIGestureRecognizerDelegate>
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface MOCardsListViewController (SWIFT_EXTENSION(MoEngageCards)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didHighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didUnhighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_CLASS("_TtC13MoEngageCards25MOCardsNavigationBarStyle")
@interface MOCardsNavigationBarStyle : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13MoEngageCards22MOCardsUIConfiguration")
@interface MOCardsUIConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP13MoEngageCards29MOCardsViewControllerDelegate_")
@protocol MOCardsViewControllerDelegate
@optional
- (void)cardsViewControllerDismissedForAccountMeta:(MOAccountMeta * _Nonnull)accountMeta;
- (void)cardDeletedWithCardInfo:(MOCardCampaign * _Nonnull)card forAccountMeta:(MOAccountMeta * _Nonnull)accountMeta;
- (BOOL)cardClickedWithCardInfo:(MOCardCampaign * _Nonnull)card andAction:(MOCardAction * _Nonnull)action forAccountMeta:(MOAccountMeta * _Nonnull)accountMeta SWIFT_WARN_UNUSED_RESULT;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
