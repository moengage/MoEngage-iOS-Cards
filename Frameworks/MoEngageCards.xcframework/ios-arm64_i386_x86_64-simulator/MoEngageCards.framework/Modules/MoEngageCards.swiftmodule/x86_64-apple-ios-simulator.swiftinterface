// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MoEngageCards
import Foundation
import MOCore
import MoEngageAnalytics
@_exported import MoEngageCards
import Swift
import UIKit
import _Concurrency
@_hasMissingDesignatedInitializers @objc public class MOCardDisplayControl : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var isPinned: Swift.Bool {
    get
  }
  @objc public var maxTimesToShow: Swift.Int64 {
    get
  }
  @objc public var expiryDate: Foundation.Date? {
    get
  }
  @objc public var showTime: MoEngageCards.MOCardShowTime? {
    get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MOCardShowTime : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var startTime: Swift.String {
    get
  }
  @objc public var endTime: Swift.String {
    get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CardsDelegateHandler : MOCore.CardsDelegate {
  override public func logout(sdkInstance: MOCore.SdkInstance, onCompleted: @escaping () -> ())
  override public func updateModule(sdkInstance: MOCore.SdkInstance)
  override public func initializeCards(sdkInstance: MOCore.SdkInstance)
  override public func applicationDidEnterForeground(sdkInstance: MOCore.SdkInstance)
  override public func applicationWillBecomeInActive(sdkInstance: MOCore.SdkInstance)
  @objc deinit
}
public enum MOCardTemplateType : Swift.String {
  case basic
  case illustration
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MOCardActionType : Swift.String {
  case deepLink
  case richLanding
  case screenName
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MOCardWidgetType : Swift.String {
  case image
  case text
  case button
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class MOCardTemplateData : ObjectiveC.NSObject, Foundation.NSCoding {
  public var type: MoEngageCards.MOCardTemplateType {
    get
  }
  @objc public var typeString: Swift.String {
    get
  }
  @objc public var containers: [MoEngageCards.MOCardContainer] {
    get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MOCardContainer : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var id: Swift.Int {
    get
  }
  public var type: MoEngageCards.MOCardTemplateType {
    get
  }
  @objc public var typeString: Swift.String {
    get
  }
  @objc public var style: MoEngageCards.MOCardStyle? {
    get
  }
  @objc public var widgets: [MoEngageCards.MOCardWidget] {
    get
  }
  @objc public var actions: [MoEngageCards.MOCardAction] {
    get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MOCardWidget : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var id: Swift.Int {
    get
  }
  public var type: MoEngageCards.MOCardWidgetType {
    get
  }
  @objc public var typeString: Swift.String {
    get
  }
  @objc public var style: MoEngageCards.MOCardStyle? {
    get
  }
  @objc public var content: Swift.String {
    get
  }
  @objc public var actions: [MoEngageCards.MOCardAction] {
    get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MOCardAction : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var name: Swift.String {
    get
  }
  public var type: MoEngageCards.MOCardActionType {
    get
  }
  @objc public var typeString: Swift.String {
    get
  }
  @objc public var value: Swift.String {
    get
  }
  @objc public var kvPairs: [Swift.String : Any] {
    get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MOCardStyle : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var bgColor: UIKit.UIColor? {
    get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MOCardCampaign : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var cardID: Swift.String {
    get
  }
  @objc public var shouldShow: Swift.Bool {
    get
  }
  @objc public var category: Swift.String {
    get
  }
  @objc public var createdDate: Foundation.Date? {
    get
  }
  @objc public var updatedDate: Foundation.Date {
    get
  }
  @objc public var metaData: [Swift.String : Any] {
    get
  }
  @objc public var templateData: MoEngageCards.MOCardTemplateData? {
    get
  }
  @objc public var displayControl: MoEngageCards.MOCardDisplayControl? {
    get
  }
  @objc public var cardPayload: [Swift.String : Any]? {
    get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol MOCardsDelegate {
  @objc optional func cardsSyncedSuccessfully(forAccountMeta accountMeta: MOCore.MOAccountMeta)
}
@objc public protocol MOCardsViewControllerDelegate {
  @objc optional func cardsViewControllerDismissed(forAccountMeta accountMeta: MOCore.MOAccountMeta)
  @objc optional func cardDeleted(withCardInfo card: MoEngageCards.MOCardCampaign, forAccountMeta accountMeta: MOCore.MOAccountMeta)
  @objc optional func cardClicked(withCardInfo card: MoEngageCards.MOCardCampaign, andAction action: MoEngageCards.MOCardAction, forAccountMeta accountMeta: MOCore.MOAccountMeta) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc public class MOCards : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCards.MOCards
  @objc public func setCardsDelegate(delegate: MoEngageCards.MOCardsDelegate, forAppID appID: Swift.String? = nil)
  @objc public func syncCards(forAppID appID: Swift.String? = nil, withCompletion completionBlock: ((_ success: Swift.Bool) -> ())? = nil)
  public func getAllCardStatusDict(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping (([[Swift.String : Any]]) -> Swift.Void))
  @objc public func getCardsData(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping ((_ cardsData: MoEngageCards.MOCardsData?, _ accountMeta: MOCore.MOAccountMeta?) -> Swift.Void))
  @objc public func getCardsCategories(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping ((_ categories: Swift.Array<Swift.String>, _ accountMeta: MOCore.MOAccountMeta?) -> ()))
  @objc public func getCards(forCategory category: Swift.String, forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping ((_ cards: Swift.Array<MoEngageCards.MOCardCampaign>, _ accountMeta: MOCore.MOAccountMeta?) -> Swift.Void))
  @objc public func isAllCategoryEnabled(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping ((Swift.Bool) -> Swift.Void))
  @objc public func cardShown(_ card: MoEngageCards.MOCardCampaign, forAppID appID: Swift.String? = nil)
  @objc public func cardClicked(_ card: MoEngageCards.MOCardCampaign, forAppID appID: Swift.String? = nil)
  @objc public func cardClicked(_ card: MoEngageCards.MOCardCampaign, withWidgetID widgetID: Swift.Int, forAppID appID: Swift.String? = nil)
  @objc public func cardDelivered(_ card: MoEngageCards.MOCardCampaign, forAppID appID: Swift.String? = nil)
  @objc public func deleteCards(_ cardsArr: [MoEngageCards.MOCardCampaign], forAppID appID: Swift.String? = nil, andCompletionBlock completionBlock: @escaping ((_ isDeleted: Swift.Bool, _ accountMeta: MOCore.MOAccountMeta?) -> ()))
  @objc public func cardsViewControllerLoaded(forAppID appID: Swift.String? = nil)
  @objc public func cardsViewControllerDismissed(forAppID appID: Swift.String? = nil)
  @objc public func getNewCardsCount(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping ((_ count: Swift.Int, _ accountMeta: MOCore.MOAccountMeta?) -> Swift.Void))
  @objc public func getUnclickedCardsCount(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping ((_ count: Swift.Int, _ accountMeta: MOCore.MOAccountMeta?) -> Swift.Void))
  @objc public func getClickedCardsCount(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping ((_ count: Swift.Int, _ accountMeta: MOCore.MOAccountMeta?) -> Swift.Void))
  @objc public func presentCardsViewController(withUIConfiguration config: MoEngageCards.MOCardsUIConfiguration? = nil, withCardsViewControllerDelegate delegate: MoEngageCards.MOCardsViewControllerDelegate? = nil, forAppID appID: Swift.String? = nil)
  @objc public func pushCardsViewController(toNavigationController navController: UIKit.UINavigationController, withUIConfiguration config: MoEngageCards.MOCardsUIConfiguration? = nil, withCardsViewControllerDelegate delegate: MoEngageCards.MOCardsViewControllerDelegate? = nil, forAppID appID: Swift.String? = nil)
  @objc public func getCardsViewController(withUIConfiguration config: MoEngageCards.MOCardsUIConfiguration? = nil, withCardsViewControllerDelegate delegate: MoEngageCards.MOCardsViewControllerDelegate? = nil, forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping ((MoEngageCards.MOCardsListViewController?) -> Swift.Void))
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MOCardsNavigationBarStyle : ObjectiveC.NSObject {
  public var navigationBarColor: UIKit.UIColor?
  public var navigationBarTintColor: UIKit.UIColor?
  public var navigationBarTitleColor: UIKit.UIColor?
  public var navigationBarTitleFont: UIKit.UIFont?
  public var navigationBarTransluscent: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MOCardsUIConfiguration : ObjectiveC.NSObject {
  public var navigationBarTitle: Swift.String
  public var navigationBarStyle: MoEngageCards.MOCardsNavigationBarStyle?
  public var categoryTabsContainerBGColor: UIKit.UIColor
  public var categoryTabsBGColor: UIKit.UIColor
  public var categoryTabsTextColor: UIKit.UIColor
  public var categorySelectedTabBGColor: UIKit.UIColor
  public var categorySelectedTabTextColor: UIKit.UIColor
  public var categorySelectionIndicatorBarColor: UIKit.UIColor
  public var categoryTabFont: UIKit.UIFont
  public var categorySelectedTabFont: UIKit.UIFont
  public var enablePullToRefresh: Swift.Bool
  public var pullToRefreshTintColor: UIKit.UIColor
  public var cardsViewControllerBGColor: UIKit.UIColor
  public var cardsTableViewBGColor: UIKit.UIColor
  public var newUpdatesButtonTitle: Swift.String
  public var newUpdatesButtonFont: UIKit.UIFont
  public var newUpdatesButtonBGColor: UIKit.UIColor
  public var newUpdatesButtonTextColor: UIKit.UIColor
  public var defaultCardBackgroundColor: UIKit.UIColor
  public var cardSelectionTintColor: UIKit.UIColor
  public var cardHeaderLabelDefaultTextColor: UIKit.UIColor
  public var cardMessageLabelDefaultTextColor: UIKit.UIColor
  public var cardTimestampLabelDefaultTextColor: UIKit.UIColor
  public var cardButtonDefaultTextColor: UIKit.UIColor
  public var cardButtonDefaultBGColor: UIKit.UIColor
  public var cardImageBackgroundColor: UIKit.UIColor
  public var cardSeparatorBackgroundColor: UIKit.UIColor
  public var cardUnclickedIndicatorColor: UIKit.UIColor
  public var cardHeaderLabelFont: UIKit.UIFont
  public var cardMessageLabelFont: UIKit.UIFont
  public var cardTimestampLabelFont: UIKit.UIFont
  public var cardButtonFont: UIKit.UIFont
  public var timestampDateFormat: Swift.String
  public var emptyInboxText: Swift.String
  public var emptyInboxTextColor: UIKit.UIColor
  public var emptyInboxTextFont: UIKit.UIFont
  public var cardUnclickedIndicatorImage: UIKit.UIImage?
  public var cardPlaceholderImage: UIKit.UIImage?
  public var cardPinnedImage: UIKit.UIImage?
  public var emptyInboxImage: UIKit.UIImage?
  public var actionSheetDeletionText: Swift.String
  public var actionSheetCancelText: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MOCardsData : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var showAllTab: Swift.Bool {
    get
  }
  @objc public var cardCategories: [Swift.String] {
    get
  }
  @objc public var cards: [MoEngageCards.MOCardCampaign] {
    get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MOCardsListViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) public func reloadInbox()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MoEngageCards.MOCardsListViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didHighlightRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didUnhighlightRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension MoEngageCards.MOCardTemplateType : Swift.Equatable {}
extension MoEngageCards.MOCardTemplateType : Swift.Hashable {}
extension MoEngageCards.MOCardTemplateType : Swift.RawRepresentable {}
extension MoEngageCards.MOCardActionType : Swift.Equatable {}
extension MoEngageCards.MOCardActionType : Swift.Hashable {}
extension MoEngageCards.MOCardActionType : Swift.RawRepresentable {}
extension MoEngageCards.MOCardWidgetType : Swift.Equatable {}
extension MoEngageCards.MOCardWidgetType : Swift.Hashable {}
extension MoEngageCards.MOCardWidgetType : Swift.RawRepresentable {}
